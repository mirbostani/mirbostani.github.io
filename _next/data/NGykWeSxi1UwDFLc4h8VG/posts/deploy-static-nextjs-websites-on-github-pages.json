{"pageProps":{"slug":"deploy-static-nextjs-websites-on-github-pages","postData":{"slug":"deploy-static-nextjs-websites-on-github-pages","contentHtml":"<h2>Create a Next.js Application</h2>\n<p>Next.js is a modern JavaScript framework that offers server-side rendering (SSR) and static site generation (SSG) features. Using SSG with Next.js enables you to build a static HTML version of your website at built time. Then, you can deploy it on any web server (i.e., GitHub Pages and Actions) you like. This makes the page loading process an extremely fast experience for the users. For more information regarding the best practice for creating a static website with Next.js, please consult its <a href=\"https://nextjs.org/docs/advanced-features/static-html-export\">documentation</a>.</p>\n<p>Create a Next.js application based on the blog starter kit, which is provided <a href=\"https://github.com/vercel/next.js/tree/canary/examples\">here</a>. Then, navigate to the project directory and start the development server.</p>\n<pre><code class=\"language-shell\">$ npx create-next-app mywebsite --use-npm --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\n$ cd mywebsite\n$ npx next dev --port 3333\n</code></pre>\n<p><img src=\"/post/deploy-static-nextjs-websites-on-github-pages/nextjs-blog-starter.png\" alt=\"nextjs-starter\"></p>\n<h2>Generate a Static Site</h2>\n<p>You can modify the application as you like. However, remember that Next.js <code>export</code> command, which is used for generating static pages, does not support <code>next/image</code> component, as this component relies on Image Optimization API. Possible ways to fix this issue is addressed <a href=\"https://nextjs.org/docs/messages/export-image-api\">here</a>; however, you can use the <code>&#x3C;img></code> HTML tag or the <a href=\"https://github.com/cyrilwanner/next-optimized-images\">next-optimized-images</a> package instead of <code>next/image</code>. Besides, <a href=\"https://nextjs.org/docs/advanced-features/i18n-routing\">internationalized (i18n) routing</a> is not compatible with exported pages either because it uses dynamic routing internally for implementation. The <a href=\"https://github.com/martinkr/next-export-i18n\">next-export-i18n</a> package is a suitable alternative.</p>\n<p>To build and export your application to the <code>./dist</code> directory, use the following commands:</p>\n<pre><code class=\"language-shell\">$ npx next build\n$ npx next export -o dist/\n</code></pre>\n<h2>Test on Nginx</h2>\n<p>After exporting a static HTML version of your Next.js application, you can test it locally with the Nginx web server. First, you need to update the package list and install Nginx with the following commands:</p>\n<pre><code class=\"language-shell\">$ sudo apt update\n$ sudo apt install nginx\n</code></pre>\n<p>The Nginx service will start automatically after a successful installation. Check if the <code>nginx.service</code> is active and running:</p>\n<pre><code class=\"language-shell\">$ sudo systemctl status nginx\n</code></pre>\n<p>You can point your browser to <code>localhost</code> address. The following page should appear in your browser.</p>\n<p><img src=\"/post/deploy-static-nextjs-websites-on-github-pages/nginx-active-and-running.png\" alt=\"nginx-active-and-running\"></p>\n<p>For testing purpose, you can now deploy your static Next.js website locally using the Nginx web server. Just copy the <code>dist</code> forlder, which contains your static website, to the <code>/var/www</code> path.</p>\n<pre><code class=\"language-shell\">$ cd /path/to/project\n$ sudo cp dist/ /var/www\n$ ls /var/www\ndist  html\n</code></pre>\n<p>In order to make your website accessible through <code>localhost:3000</code>, you need to set up a virtual host inside the Nginx web server.</p>\n<pre><code class=\"language-shell\">$ cd /etc/nginx/sites-available\n$ sudo touch dist\n$ vim dist\n</code></pre>\n<pre><code class=\"language-nginx\">server {\n  listen 3000;\n  listen [::]:3000;\n  server_name dist.example.com;\n  root /var/www/dist;\n  index index.html;\n  location / {\n    try_files $uri $uri/ =404;\n  }\n}\n</code></pre>\n<p>Enable the virtual host that you've just created by creating a symbolic link inside the <code>sites-enabled</code> directory.</p>\n<pre><code class=\"language-shell\">$ cd /etc/nginx/sites-enabled\n$ sudo ln -s /etc/nginx/sites-available/dist dist\n</code></pre>\n<p>Restart Nginx to make the changes take effect.</p>\n<pre><code class=\"language-shell\">$ sudo systemctl restart nginx\n</code></pre>\n<p>You can access the website by pointing your browser to the <code>localhost:3000</code> address.</p>\n<p>TODO: Picture of your home page</p>\n<h2>Push to GitHub</h2>\n","contentMarkdown":"\n## Create a Next.js Application\n\nNext.js is a modern JavaScript framework that offers server-side rendering (SSR) and static site generation (SSG) features. Using SSG with Next.js enables you to build a static HTML version of your website at built time. Then, you can deploy it on any web server (i.e., GitHub Pages and Actions) you like. This makes the page loading process an extremely fast experience for the users. For more information regarding the best practice for creating a static website with Next.js, please consult its [documentation](https://nextjs.org/docs/advanced-features/static-html-export).\n\nCreate a Next.js application based on the blog starter kit, which is provided [here](https://github.com/vercel/next.js/tree/canary/examples). Then, navigate to the project directory and start the development server.\n\n```shell\n$ npx create-next-app mywebsite --use-npm --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\n$ cd mywebsite\n$ npx next dev --port 3333\n```\n\n![nextjs-starter](/post/deploy-static-nextjs-websites-on-github-pages/nextjs-blog-starter.png)\n\n## Generate a Static Site\n\nYou can modify the application as you like. However, remember that Next.js `export` command, which is used for generating static pages, does not support `next/image` component, as this component relies on Image Optimization API. Possible ways to fix this issue is addressed [here](https://nextjs.org/docs/messages/export-image-api); however, you can use the `<img>` HTML tag or the [next-optimized-images](https://github.com/cyrilwanner/next-optimized-images) package instead of `next/image`. Besides, [internationalized (i18n) routing](https://nextjs.org/docs/advanced-features/i18n-routing) is not compatible with exported pages either because it uses dynamic routing internally for implementation. The [next-export-i18n](https://github.com/martinkr/next-export-i18n) package is a suitable alternative.\n\nTo build and export your application to the `./dist` directory, use the following commands:\n\n```shell\n$ npx next build\n$ npx next export -o dist/\n```\n\n## Test on Nginx\n\nAfter exporting a static HTML version of your Next.js application, you can test it locally with the Nginx web server. First, you need to update the package list and install Nginx with the following commands:\n\n```shell\n$ sudo apt update\n$ sudo apt install nginx\n```\n\nThe Nginx service will start automatically after a successful installation. Check if the `nginx.service` is active and running:\n\n```shell\n$ sudo systemctl status nginx\n```\n\nYou can point your browser to `localhost` address. The following page should appear in your browser.\n\n![nginx-active-and-running](/post/deploy-static-nextjs-websites-on-github-pages/nginx-active-and-running.png)\n\nFor testing purpose, you can now deploy your static Next.js website locally using the Nginx web server. Just copy the `dist` forlder, which contains your static website, to the `/var/www` path.\n\n```shell\n$ cd /path/to/project\n$ sudo cp dist/ /var/www\n$ ls /var/www\ndist  html\n```\n\nIn order to make your website accessible through `localhost:3000`, you need to set up a virtual host inside the Nginx web server.\n\n```shell\n$ cd /etc/nginx/sites-available\n$ sudo touch dist\n$ vim dist\n```\n\n```nginx\nserver {\n  listen 3000;\n  listen [::]:3000;\n  server_name dist.example.com;\n  root /var/www/dist;\n  index index.html;\n  location / {\n    try_files $uri $uri/ =404;\n  }\n}\n```\n\nEnable the virtual host that you've just created by creating a symbolic link inside the `sites-enabled` directory.\n\n```shell\n$ cd /etc/nginx/sites-enabled\n$ sudo ln -s /etc/nginx/sites-available/dist dist\n```\n\nRestart Nginx to make the changes take effect.\n\n```shell\n$ sudo systemctl restart nginx\n```\n\nYou can access the website by pointing your browser to the `localhost:3000` address.\n\nTODO: Picture of your home page\n\n## Push to GitHub\n","readTime":2,"category":"Web Development","title":"Deploy static Next.js websites on GitHub Pages","description":"Use Next.js to develop and export a static HTML version of a website to be hosted on GitHub Pages.","date":"2021-09-14","author":"mirbostani","tags":"nextjs,github"}},"__N_SSG":true}